{"version":3,"sources":["components/Chart.module.css","components/Chart.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Component","country","file","filename","svgHeight","height","svgWidth","width","React","dataSet","setDataSet","container","length","d3","then","data","data_all","forEach","item","i","undefined","Confirmed","Date","data_i","Deaths","Recovered","push","hght","maxCases","Math","max","apply","map","d","dataNormzd","svg","current","xScale","domain","rangeRound","yScale","nice","range","append","selectAll","enter","classed","attr","bandwidth","xAxis","scale","yAxis","padding","call","className","styles","containerChart","header","xmlns","ref","App","useState","setCountry","CountryButton","value","onChange","e","target","path","process","render","exact","component","to","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8EACAA,EAAOC,QAAU,CAAC,OAAS,sBAAsB,eAAiB,gC,iOCIrDC,EAA+C,SAAC,GAKtD,IAJLC,EAII,EAJJA,QACUC,EAGN,EAHJC,SACQC,EAEJ,EAFJC,OACOC,EACH,EADJC,MACI,EAE4BC,WAAe,IAF3C,mBAEKC,EAFL,KAEcC,EAFd,KAIIC,EAA0CH,SAAa,MAoF7D,OAlFAA,aAAgB,WAEU,IAAnBC,EAAQG,QAAgBV,GACvBW,IAAOX,GACNY,MAAM,SAACC,GACJ,IAAIC,EAAwB,GAC5BD,EAAKE,SAAQ,SAACC,EAAMC,GAChB,GAAKD,EAAK,oBAAsBjB,QAA8BmB,IAAnBF,EAAKG,gBAAyCD,IAAdF,EAAKI,KAAoB,CAChG,IAAIC,EAAoB,CACpB,GAAMJ,EACN,iBAAkBD,EAAK,kBACvB,iBAAkBA,EAAK,kBACvB,WAAcA,EAAKG,UACnB,OAAUH,EAAKM,OACf,KAAQN,EAAKI,KACb,UAAaJ,EAAKO,WAEtBT,EAASU,KAAKH,OAGtBb,EAAWM,MAInB,IACMW,GAAQvB,EADE,GAEVwB,EAAWC,KAAKC,IAAIC,MAAM,KAAMtB,EAAQuB,KAAI,SAAAC,GAAC,OAAIA,EAAEZ,cAErDa,EAA0B,GAC9BzB,EAAQQ,SAAQ,SAAAF,GACZmB,EAAWR,KAAX,2BACOX,GADP,IAEI,UAAcA,EAAKM,UAAUO,EAAWD,QAMhD,IAAMQ,EAAMtB,IAAUF,EAAUyB,SAE5BC,EAASxB,MACZyB,OAAOJ,EAAWF,KAAI,SAAAC,GAAC,OAAIA,EAAEX,SAC7BiB,WAAW,CAAC,GAAIjC,IAEbkC,EAAS3B,MACZyB,OAAO,CAAC,EAAGV,IACXa,OACAC,MAAM,CAACf,EAAM,IAEdQ,EACCQ,OAAO,KAEPC,UAAU,OACV7B,KAAKmB,GACLW,QACAF,OAAO,QACPG,QAAQ,OAAO,GACfC,KAAK,KAAK,SAAAd,GAAC,OAAII,EAAOJ,EAAEX,SACxByB,KAAK,KAAK,SAAAd,GAAC,OAAIN,EAAKM,EAAEZ,aACtB0B,KAAK,UAAU,SAAAd,GAAC,OAAIA,EAAEZ,aACtB0B,KAAK,SAAS,SAAAd,GAAC,MAAuB,GAAnBI,EAAOW,eAC1BD,KAAK,OAAQ,OAEd,IAAIE,EAAQpC,IAAcwB,GACzBa,MAAMb,GAEHc,EAAQtC,IAAY2B,GACvBU,MAAMV,GAEPL,EACCQ,OAAO,KACPI,KAAK,YAFN,oBAEgCK,IAFhC,SAGCC,KAAKF,GAENhB,EACCQ,OAAO,KACPI,KAAK,YAFN,oBAEgCK,IAFhC,aAE8CzB,EAF9C,MAGC0B,KAAKJ,KAGR,CAACtC,EAAWF,EAASR,EAASK,EAAUJ,EAAME,IAG5C,uBAAKkD,UAAaC,IAAOC,gBACrB,uBAAKF,UAAaC,IAAOE,QAAzB,+BAA8DxD,GAC9D,uBAAKyD,MAAM,6BAA6BnD,MAAOD,EAAUD,OAAQD,EAAWuD,IAAKhD,MCtD9EiD,MA1Cf,WAAgB,IAAD,EACiBC,mBAAS,UAD1B,mBACN5D,EADM,KACG6D,EADH,KAGPC,EAAgB,WACpB,OACE,4BAAQT,UAAY,gBAAgBU,MAAS/D,EAASgE,SAAY,SAACC,GAAD,OAAOJ,EAAWI,EAAEC,OAAOH,SAC3F,4BAAQA,MAAQ,UAAhB,UACA,4BAAQA,MAAQ,WAAhB,WACA,4BAAQA,MAAQ,SAAhB,SACA,4BAAQA,MAAQ,WAAhB,WACA,4BAAQA,MAAQ,UAAhB,YAeN,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEI,KAAI,UAAKC,uCAAL,UACJC,OAAQ,kBAAO,kBAAC,EAAD,CACbnE,SAAW,8BACXF,QAAWA,EACXM,MAAQ,MACRF,OAAS,WAGb,kBAAC,IAAD,CAAOkE,OAAK,EAACH,KAAI,UAAKC,wCAA0BG,UArBlC,WAChB,OACE,6BAASlB,UAAY,OACnB,yBAAKA,UAAY,QAAjB,iDACA,kBAACS,EAAD,MACA,kBAAC,IAAD,CAAMU,GAAE,UAAKJ,uCAAL,WAAR,iCCbYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAAST,OACP,kBAAC,IAAMU,WAAP,KACI,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGNC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvE,MAAK,SAAAwE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0a2646b4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Chart_header__1lFd6\",\"containerChart\":\"Chart_containerChart__qZ7DK\"};","import * as d3 from 'd3'\nimport * as React from 'react';\nimport * as T from './Chart.types'\nimport styles from './Chart.module.css'\n\nexport const Component: React.FunctionComponent<T.IProps> = ({\n  country,\n  filename: file,\n  height: svgHeight,\n  width: svgWidth,\n}) => {\n\n    const [dataSet, setDataSet] = React.useState([] as T.IDataSet[])\n\n    const container: React.MutableRefObject<null> = React.useRef(null)\n\n    React.useEffect(() => {\n\n       if (dataSet.length === 0 && file){           \n            d3.csv(file)\n            .then( (data) => {\n                let data_all:T.IDataSet[] = []\n                data.forEach((item, i) => {\n                    if ( item[\"Country/Region\"] === country && item.Confirmed !== undefined && item.Date !== undefined) {\n                        let data_i:T.IDataSet = {\n                            \"No\": i,\n                            \"Country/Region\": item[\"Country/Region\"],\n                            \"Province/State\": item[\"Province/State\"],\n                            \"Confirmed\": +item.Confirmed,\n                            \"Deaths\": item.Deaths,\n                            \"Date\": item.Date,\n                            \"Recovered\": item.Recovered\n                        }\n                        data_all.push(data_i)\n                    }\n                })\n                setDataSet(data_all)\n            })\n        }\n\n        const padding = 50;\n        const hght = +svgHeight-padding;\n        const maxCases = Math.max.apply(null, dataSet.map(d => d.Confirmed))\n\n        let dataNormzd:T.IDataSet[] = []\n        dataSet.forEach(data => {\n            dataNormzd.push({\n                ...data,\n                \"Confirmed\": (data.Confirmed/maxCases)*(hght)\n            })\n        })\n\n\n\n        const svg = d3.select(container.current)\n\n        let xScale = d3.scaleBand()\n        .domain(dataNormzd.map(d => d.Date as string))\n        .rangeRound([0, +svgWidth])\n\n        let yScale = d3.scaleLinear()\n        .domain([0, maxCases])\n        .nice()\n        .range([hght, 0])\n\n        svg\n        .append('g')\n        //.attr('transform', 'translate(0,0)')\n        .selectAll('bar')\n        .data(dataNormzd)\n        .enter()\n        .append('rect')\n        .classed('bar', true)\n        .attr('x', d => xScale(d.Date) as number)\n        .attr('y', d => hght-d.Confirmed)\n        .attr('height', d => d.Confirmed)\n        .attr('width', d => xScale.bandwidth()*0.7)\n        .attr(\"fill\", \"red\");\n\n        let xAxis = d3.axisBottom(xScale)\n        .scale(xScale)\n\n        let yAxis = d3.axisLeft(yScale)\n        .scale(yScale)      \n\n        svg\n        .append('g')\n        .attr('transform', `translate(${padding*2}, 0)`)\n        .call(yAxis)\n\n        svg\n        .append('g')\n        .attr('transform', `translate(${padding*2}, ${hght})`)\n        .call(xAxis)\n\n\n    },[container, dataSet, country, svgWidth, file, svgHeight])\n  \n    return (\n        <div className = {styles.containerChart}>\n            <div className = {styles.header}>Number of COVID-19 cases in {country}</div>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width={svgWidth} height={svgHeight} ref={container} />\n        </div>\n\n    );\n  \n}\n","import React, {useState} from 'react';\nimport { Switch, Route, Link } from 'react-router-dom'\nimport './App.css';\nimport { Component } from './components/Chart'\n\nfunction App() {\n  const [country, setCountry] = useState(\"Russia\")\n\n  const CountryButton = () => {\n    return (\n      <select className = \"countrySelect\" value = {country} onChange = {(e) => setCountry(e.target.value)}>\n        <option value = 'Russia'>Russia</option>\n        <option value = 'Germany'>Germany</option>\n        <option value = 'Italy'>Italy</option>\n        <option value = 'Ukraine'>Ukraine</option>\n        <option value = 'Sweden'>Sweden</option>\n      </select>\n    )\n  }\n  \n  const IndexPage = () => {\n    return(\n      <section className = \"box\">\n        <div className = \"text\">SHOCKING NEWS!!! Russian scientists reveal...</div>\n        <CountryButton/>\n        <Link to={`${process.env.PUBLIC_URL}/chart`}>Bell curve of intellect</Link>\n      </section>\n    )\n  }\n\n  return (\n    <Switch>\n      <Route\n        path={`${process.env.PUBLIC_URL}/chart`}\n        render={() => (<Component \n          filename = \"covid_19_clean_complete.csv\" \n          country = {country}\n          width = \"800\"\n          height = \"750\"\n          />)}\n      />\n      <Route exact path={`${process.env.PUBLIC_URL}`} component = {IndexPage}>\n      </Route>\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n      <Router>\n        <App />\n      </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}